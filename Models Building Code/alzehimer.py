# -*- coding: utf-8 -*-
"""Alzehimer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EbpdUAM_dwxljO0_SEbUxJ0N_OfK5qLB
"""

import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.utils import to_categorical

def load_and_preprocess_data(folder_path, label):
    data = []
    labels = []
    for filename in os.listdir(folder_path):
        img_path = os.path.join(folder_path, filename)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
        img = cv2.resize(img, (64, 64))  # Adjust the size as needed
        data.append(img)
        labels.append(label)
    return data, labels

mild_demented_data, mild_demented_labels = load_and_preprocess_data('/content/drive/MyDrive/test/MildDemented', 0)
moderate_demented_data, moderate_demented_labels = load_and_preprocess_data('/content/drive/MyDrive/test/ModerateDemented', 1)
non_demented_data, non_demented_labels = load_and_preprocess_data('/content/drive/MyDrive/test/NonDemented', 2)
very_mild_demented_data, very_mild_demented_labels = load_and_preprocess_data('/content/drive/MyDrive/test/VeryMildDemented', 3)

data = np.array(mild_demented_data + moderate_demented_data + non_demented_data + very_mild_demented_data)
labels = np.array(mild_demented_labels + moderate_demented_labels + non_demented_labels + very_mild_demented_labels)

labels_one_hot = to_categorical(labels, num_classes=4)

train_data, test_data, train_labels, test_labels = train_test_split(data, labels_one_hot, test_size=0.2, random_state=42)

train_data = train_data / 255.0
test_data = test_data / 255.0

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 1)),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(4, activation='softmax')  # Adjust the number of units for the output layer
])
epochs=8

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
history = model.fit(np.expand_dims(train_data, axis=-1), train_labels, epochs=epochs, batch_size=32, validation_split=0.2)

train_features = model.predict(np.expand_dims(train_data, axis=-1))
test_features = model.predict(np.expand_dims(test_data, axis=-1))

model.save('alzeihmer.h5')